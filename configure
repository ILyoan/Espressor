#!/bin/sh

msg() {
    echo "configure: $1"
}

step_msg() {
    msg
    msg "$1"
    msg
}

err() {
    echo "configure: error: $1"
    exit 1
}

need_cmd() {
    if which $1 >/dev/null 2>&1
    then msg "found $1"
    else err "need $1"
    fi
}

make_dir() {
    if [ ! -d $1 ]
    then 
        msg "mkdir -p $1"
        mkdir -p $1
    fi
}

copy_if_changed() {
    if cmp -s $1 $2
    then
        msg "leaving $2 unchanged"
    else
        msg "cp $1 $2"
        cp -f $1 $2
        chmod u-w $2 # make copied artifact read-only
    fi
}

move_if_changed() {
    if cmp -s $1 $2
    then
        msg "leaving $2 unchanged"
    else
        msg "mv $1 $2"
        mv -f $1 $2
        chmod u-w $2 # make moved artifact read-only
    fi
}

putvar() {
    local T
    eval T=\$$1
    eval TLEN=\${#$1}
    if [ $TLEN -gt 35 ]
    then
        printf "configure: %-20s := %.35s ...\n" $1 "$T"
    else
        printf "configure: %-20s := %s %s\n" $1 "$T" "$2"
    fi
    printf "%-20s := %s\n" $1 "$T" >>config.tmp
}

step_msg "looking for configure programs"

need_cmd rustc

CFG_RUSTC="$(which rustc)"


step_msg "create build directory tree"

CFG_BUILD_DIR="$(pwd)/"
CFG_HOME_DIR="$(cd $(dirname $0) && pwd)/"
CFG_SRC_DIR="${CFG_HOME_DIR}src/"
CFG_OUT_DIR="${CFG_BUILD_DIR}out/"
CFG_BIN_DIR="${CFG_OUT_DIR}bin/"
CFG_LIB_DIR="${CFG_OUT_DIR}lib/"

# Create build directory tree.
mkdir $CFG_OUT_DIR
mkdir $CFG_BIN_DIR
mkdir $CFG_LIB_DIR


step_msg "writing configuration"


echo '' >config.tmp
putvar CFG_BUILD_DIR
putvar CFG_HOME_DIR
putvar CFG_SRC_DIR
putvar CFG_OUT_DIR
putvar CFG_BIN_DIR
putvar CFG_LIB_DIR
putvar CFG_BUILD_DIR
putvar CFG_RUSTC

copy_if_changed ${CFG_HOME_DIR}Makefile.in ./Makefile
move_if_changed config.tmp config.mk
rm -f config.tmp
touch config.stamp

step_msg "complete"
